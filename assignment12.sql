-- ADD tables with no foreign keys first:

-- Represents customer information.
CREATE TABLE Customer (
	customer_id int NOT NULL PRIMARY KEY,
    customer_name varchar(50),
    phone_number varchar(15)
);

-- Represents pizza information.
CREATE TABLE Pizza (
	pizza_id int NOT NULL PRIMARY KEY,
    pizza_type varchar(50),
    pizza_price decimal(10,2)
);

-- One customer (record in the Customer table) can have many orders (records in the Orders table).
CREATE TABLE Orders (
	order_id int NOT NULL PRIMARY KEY,
    customer_id int NOT NULL,
	order_date DATETIME ,
    CONSTRAINT fk_customer_Order
    FOREIGN KEY (customer_id) 
    REFERENCES Customer(customer_id)
);




-- Represents the relationship between orders and pizzas with quantity information.
CREATE TABLE OrdersPizza (
	order_pizza_id int NOT NULL PRIMARY KEY,
    pizza_id int NOT NULL,
    order_id int NOT NULL,
    amount int NOT NULL DEFAULT 1,
	CONSTRAINT fk_pizza_OrdersPizza 
    FOREIGN KEY (pizza_id) 
    REFERENCES Pizza(pizza_id),
    CONSTRAINT fk_order_OrdersPizza 
    FOREIGN KEY (order_id) 
    REFERENCES Orders(order_id)
);

-- Represents the relationship between customers and pizzas.
CREATE TABLE CustomerPizza (
	customer_pizza_id int NOT NULL PRIMARY KEY,
    customer_id int NOT NULL,
    pizza_id int NOT NULL,
    amount int NOT NULL DEFAULT 1,
    CONSTRAINT fk_customer_CustomerPizza
	FOREIGN KEY (pizza_id) 
    REFERENCES Pizza(pizza_id),
    CONSTRAINT fk_pizza_CustomerPizza
    FOREIGN KEY (customer_id) 
    REFERENCES Customer(customer_id)
);

-- Upload Data into database:

-- Insert data into Customer table
INSERT INTO Customer (customer_id, customer_name, phone_number) VALUES 
(1, 'Trevor Page', '226-555-4982'),
(2, 'John Doe', '555-555-9498');

-- Insert data into Pizza table
INSERT INTO Pizza (pizza_id, pizza_type, pizza_price) VALUES 
(1, 'Pepperoni & Cheese', 7.99),    -- Decimal value for pizza_price
(2, 'Vegetarian', 9.99),
(3, 'Meat Lovers', 14.99),
(4, 'Hawaiian', 12.99);

-- Insert data into Orders table
INSERT INTO Orders (order_id, customer_id, order_date) VALUES 
(1, 1, '2014-09-10 09:47:00'), -- Order date/time: 9/10/2014 9:47:00 AM
(2, 2, '2014-09-10 13:20:00'), -- Order date/time: 9/10/2014 1:20:00 PM
(3, 1, '2014-09-10 09:47:00'); -- Order date/time: 9/10/2014 9:47:00 AM

-- Insert data into OrdersPizza table
INSERT INTO OrdersPizza (order_pizza_id, order_id, pizza_id, amount) VALUES 
(1, 1, 1, 1),   -- OrdersPizza ID: 1, Pizza ID: 1 (Pepperoni & Cheese), Order ID: 1, Amount: 1
(2, 1, 3, 1),   -- OrdersPizza ID: 2, Pizza ID: 1 (Pepperoni & Cheese), Order ID: 3, Amount: 1
(3, 2, 2, 1),   -- OrdersPizza ID: 3, Pizza ID: 2 (Vegetarian), Order ID: 2, Amount: 1
(4, 2, 3, 2),   -- OrdersPizza ID: 4, Pizza ID: 2 (Vegetarian), Order ID: 3, Amount: 2
(5, 3, 3, 1),   -- OrdersPizza ID: 5, Pizza ID: 3 (Meat Lovers), Order ID: 3, Amount: 1
(6, 3, 4, 1);   -- OrdersPizza ID: 6, Pizza ID: 3 (Meat Lovers), Order ID: 4, Amount: 1


-- Insert data into CustomerPizza table
INSERT INTO CustomerPizza (customer_pizza_id, customer_id, pizza_id, amount) VALUES 
(1, 1, 1, 1),   -- CustomerPizza ID: 1, Customer ID: 1, Pizza ID: 1 (Pepperoni & Cheese), Amount: 1
(2, 1, 3, 2),   -- CustomerPizza ID: 2, Customer ID: 1, Pizza ID: 3 (Meat Lovers), Amount: 2
(3, 1, 4, 1),   -- CustomerPizza ID: 3, Customer ID: 1, Pizza ID: 4 (Hawaiian), Amount: 1
(4, 2, 2, 1),   -- CustomerPizza ID: 4, Customer ID: 2, Pizza ID: 2 (Vegetarian), Amount: 1
(5, 2, 3, 2);   -- CustomerPizza ID: 5, Customer ID: 2, Pizza ID: 3 (Meat Lovers), Amount: 2

-- Question 4 Solution 1:
-- This query calculates the total revenue generated by each customer.
-- It joins the Orders, OrderPizza, Pizza, and Customer tables to retrieve the necessary information.
-- The total revenue is calculated by summing the product of pizza prices and order quantities (amount) for each customer.
-- The result is a list of customer names and their respective total revenues.
SELECT Customer.customer_name, SUM(Pizza.pizza_price * OrderPizza.amount) AS TotalRevenue
FROM Orders
JOIN OrderPizza ON Orders.order_id = OrderPizza.order_id
JOIN Pizza ON OrderPizza.pizza_id = Pizza.pizza_id
JOIN Customer ON Orders.customer_id = Customer.customer_id
GROUP BY Customer.customer_name;

-- Question 5:
-- This query calculates the total revenue generated by customers for each order date.
-- It joins the Orders, OrderPizza, Pizza, and Customer tables to retrieve the necessary information.
-- The total revenue is calculated by summing the product of pizza prices and order quantities (amount) for each customer and order date.
-- The result is a list of customer names, order dates, and their respective total revenues.
SELECT 
    c.customer_name, 
    DATE(o.order_date) AS order_date, 
    SUM(p.pizza_price * op.amount) AS total_revenue
FROM 
    Orders o
    JOIN OrdersPizza op ON o.order_id = op.order_id
    JOIN Pizza p ON op.pizza_id = p.pizza_id
    JOIN Customer c ON o.customer_id = c.customer_id
GROUP BY 
    c.customer_name, 
    order_date;


-- IGNORE: Practice queries:
-- Select out the order number and when you get results, add on the specific pizza type to get the amount of that:
SELECT Customer.customer_name, Customer.phone_number, Orders.order_date, Pizza.pizza_type, OrdersPizza.amount
FROM Orders
JOIN OrdersPizza ON Orders.order_id = OrdersPizza.order_id
JOIN Pizza ON OrdersPizza.pizza_id = Pizza.pizza_id
JOIN Customer ON Orders.customer_id = Customer.customer_id
WHERE Orders.order_id = 2 and Pizza.pizza_type = "Meat Lovers";

-- This query calculates the total revenue for each order by joining the Orders, OrdersPizza, Pizza, and Customer tables.
-- It sums the product of pizza prices and order quantities (amount) for each order.
-- The result is a list of orders with their total revenue.
SELECT Orders.order_id, Customer.customer_name, SUM(Pizza.pizza_price * OrdersPizza.amount) AS TotalRevenue
FROM Orders
JOIN OrdersPizza ON Orders.order_id = OrdersPizza.order_id
JOIN Pizza ON OrdersPizza.pizza_id = Pizza.pizza_id
JOIN Customer ON Orders.customer_id = Customer.customer_id
GROUP BY Orders.order_id
ORDER BY Orders.order_id;

-- Question 4 Solution 2:
-- Trevor: 7.99 + 2(14.99) + 12.99 = 50.96
-- John Doe: 9.99 + 2(14.99) = 39.97
-- This query calculates the total revenue generated by each customer by joining the Customer, CustomerPizza, and Pizza tables.
-- It sums the product of pizza prices and order quantities (amount) for each customer, providing the total revenue for each.
-- The result is a list of customer names along with their respective total revenue.
SELECT Customer.customer_name, SUM(Pizza.pizza_price * CustomerPizza.amount) AS TotalRevenue
FROM Customer
JOIN CustomerPizza ON Customer.customer_id = CustomerPizza.customer_id
JOIN Pizza ON CustomerPizza.pizza_id = Pizza.pizza_id
GROUP BY Customer.customer_name;

